% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/init_classes.R
\name{init_classes}
\alias{init_classes}
\title{Sets the rules to categorize frontier metrics}
\usage{
init_classes(
  baseline = list(c(5, 10, 55, Inf), c("Low", "Medium", "High")),
  loss = list(c(-Inf, 20, 50, Inf), c("Low", "Medium", "High")),
  fragmentation = list(c(-Inf, 10, 20, Inf), c("Low", "Medium", "High")),
  speed = list(c(-Inf, 0.05, 0.25, Inf), c("Slow", "Medium", "Fast")),
  activeness = list(old = 2018, emerging = 2019),
  left = list(c(-Inf, 33, 66, Inf), c("Low", "Medium", "High"))
)
}
\arguments{
\item{baseline, loss, fragmentation, speed, activeness, left}{A list defining the
rules to define discrete classes for each frontier metric. See Details.}
}
\value{
An object of class 'FronterMetric_classes' to be used with \code{\link[=fmetrics]{fmetrics()}}.
}
\description{
Defines rules to generate discrete categories for individual frontier metrics.
}
\details{
By default, in the scenario of default definition of frontiers, rules to
categorize frontier metrics are the following:

\if{html}{\out{<div class="sourceCode">}}\preformatted{Baseline woodland [\%]:
  Low (5,10]
  Medium (10,55]
  High (55,Inf]

Woodland loss [\%]:
  Low (-Inf,20]
  Medium (20,50]
  High (50,Inf]

Fragmentation [m/ha]:
  Low (-Inf,10]
  Medium (10,20]
  High (20,Inf]

Speed [kmÂ²/year]:
  Slow (-Inf,0.05]
  Medium (0.05,0.25]
  Fast (0.25,Inf]

Activeness:
  Old       ... ,[2012,2016], [2013,2017], [2014,2018]
  Active    [2015,2019], [2016,2020] ... [2018,2022]
  Emerging  [2019,2023]

Woodland left [\%]:
  Low (-Inf,33]
  Medium (33,66]
  High (66,Inf]
}\if{html}{\out{</div>}}

To define new rules, provide a list for each frontier metric. For all metrics except "activeness"
the rules should follow the format used in \code{\link[=cut]{cut()}}. Specifically, the first element
of the list should be a numeric vector of two or more unique cut points (breaks), and the second
element should be a character vector of labels corresponding to each resulting category. For
instance, classes for frontier metric "baseline" could be ruled as follows:

\if{html}{\out{<div class="sourceCode">}}\preformatted{baseline = list(c(5, 10, 55, Inf),
                c("Low", "Medium", "High"))
}\if{html}{\out{</div>}}

Note that, for baseline, by default the lowest value is 5\%, which is the lowest limit defined by
default to define a frontier when running \code{\link[=init_fmetrics]{init_fmetrics()}}. This lowest limit should be changed if
by a frontier was defined with a different threshold in the percentage of initial woodland cover
when running \code{\link[=init_fmetrics]{init_fmetrics()}}.

The "activeness" metric, which is discrete by definition, requires a list of two elements:
(1) the last year of a given-consecutive year period a frontier was active to be labeled "Old";
(2) the first year of a given-consecutive year period a frontier became active to be labeled "Emerging".

A frontier will be classified as simply "Active" if it was active during any of all given-consecutive
years between the "Old" and "Emerging" periods.

For instance:

\if{html}{\out{<div class="sourceCode">}}\preformatted{activeness = list(old = 2018, emerging = 2019, window = 5)
}\if{html}{\out{</div>}}

When assigned to an object, the new definition of classes can be passed to \code{\link[=fmetrics]{fmetrics()}},
inside the argument \code{classes}, to generate frontier metrics's classes with a new definition.

For a clearer understanding of rule definition, see the example below.
}
\examples{
\dontrun{
# Explore default parameters
init_classes()

# Define new parameters for baseline and activeness
# Baseline
#   Low: between 5 and 20
#   Medium: between 20 and 70
#   High: Higher than 70
# Activeness
#   Old frontiers: last year active in 2015
#   Emerging frontiers: first year active in 2018
class_par <- init_classes(baseline = list(c(5, 20, 70, Inf),
                                          c("Low", "Medium", "High"),
                          activeness = list(old = 2015, emerging = 2018)))

# Shows new defined classes
class_par

# This object can be passes to [frontiermetrics()] inside the argument
# `classes`, to generate frontier metrics's classes with this new definition
}
}
